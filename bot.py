from aiogram import Bot, Dispatcher, types, F
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, Message
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
import asyncio
import os

API_TOKEN = '7936997110:AAHoUpcqsnTswLN3sRX307J4N5aLrj-BR5g'
ADMIN_ID = 951399170  # üëà –í—Å—Ç–∞–≤—å —Å—é–¥–∞ —Å–≤–æ–π Telegram ID
CHANNEL_USERNAME = '@copyrayter1'

bot = Bot(token=API_TOKEN)
dp = Dispatcher()

# FSM –¥–ª—è –∑–∞–∫–∞–∑–∞ –∏ –æ—Ç–∑—ã–≤–∞
class OrderState(StatesGroup):
    waiting_for_task = State()
    waiting_for_urgency = State()
    waiting_for_file = State()

class FeedbackState(StatesGroup):
    waiting_for_feedback = State()

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞
main_menu = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="üìã –£—Å–ª—É–≥–∏", callback_data="services"),
     InlineKeyboardButton(text="üí∞ –¶–µ–Ω—ã", callback_data="prices")],
    [InlineKeyboardButton(text="üìù –°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑", callback_data="order")],
    [InlineKeyboardButton(text="‚≠ê –û—Ç–∑—ã–≤—ã", callback_data="reviews"),
     InlineKeyboardButton(text="üí¨ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤", callback_data="feedback")],
    [InlineKeyboardButton(text="‚ùì –ü–æ–º–æ—â—å", callback_data="help")]
])

@dp.message(Command("start"))
async def start(message: Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É –≤–∞–º —Å –∫–æ–ø–∏—Ä–∞–π—Ç–∏–Ω–≥–æ–º, –¥–∏–∑–∞–π–Ω–æ–º –∏ –Ω–µ —Ç–æ–ª—å–∫–æ.\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç:",
        reply_markup=main_menu
    )

@dp.callback_query(F.data == "services")
async def services(callback: types.CallbackQuery):
    await callback.message.edit_text(
        "üîß *–£—Å–ª—É–≥–∏:*\n\n"
        "‚Äî –ù–∞–±–æ—Ä —Ç–µ–∫—Å—Ç–∞, –∫–æ–ø–∏—Ä–∞–π—Ç–∏–Ω–≥ ‚úçÔ∏è\n"
        "‚Äî –ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏, –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –≤ Canva üé®\n"
        "‚Äî –¢–∞–±–ª–∏—Ü—ã, –¥–æ–∫—É–º–µ–Ω—Ç—ã üìÑ\n"
        "‚Äî PDF, —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è üéß\n"
        "‚Äî –õ—ë–≥–∫–∏–π –¥–∏–∑–∞–π–Ω üñåÔ∏è",
        parse_mode="Markdown",
        reply_markup=main_menu
    )

@dp.callback_query(F.data == "prices")
async def prices(callback: types.CallbackQuery):
    await callback.message.edit_text(
        "üí∞ *–¶–µ–Ω—ã:*\n\n"
        "–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å ‚Äî *–æ—Ç 300‚ÇΩ*.\n"
        "–°—Ä–æ—á–Ω—ã–µ –∑–∞–∫–∞–∑—ã ‚Äî –ø–æ –¥–æ–≥–æ–≤–æ—Ä—ë–Ω–Ω–æ—Å—Ç–∏.",
        parse_mode="Markdown",
        reply_markup=main_menu
    )

@dp.callback_query(F.data == "help")
async def help_section(callback: types.CallbackQuery):
    await callback.message.edit_text(
        "‚ùì *–ü–æ–º–æ—â—å:*\n\n"
        "–ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ–ø–æ–Ω—è—Ç–Ω–æ ‚Äî –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ.\n"
        "–Ø –æ—Ç–≤–µ—á—É –∫–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ!",
        parse_mode="Markdown",
        reply_markup=main_menu
    )

@dp.callback_query(F.data == "order")
async def start_order(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.edit_text("üìù –û–ø–∏—à–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —á—Ç–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å:")
    await state.set_state(OrderState.waiting_for_task)

@dp.message(OrderState.waiting_for_task)
async def get_task(message: Message, state: FSMContext):
    await state.update_data(task=message.text)
    await message.answer("‚è± –≠—Ç–æ —Å—Ä–æ—á–Ω–æ? (–î–∞ / –ù–µ—Ç)")
    await state.set_state(OrderState.waiting_for_urgency)

@dp.message(OrderState.waiting_for_urgency)
async def get_urgency(message: Message, state: FSMContext):
    await state.update_data(urgency=message.text)
    await message.answer("üìé –ï—Å–ª–∏ –µ—Å—Ç—å —Ñ–∞–π–ª ‚Äî –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ.\n–ï—Å–ª–∏ –Ω–µ—Ç ‚Äî –Ω–∞–ø–∏—à–∏—Ç–µ '–Ω–µ—Ç'.")
    await state.set_state(OrderState.waiting_for_file)

@dp.message(OrderState.waiting_for_file)
async def get_file(message: Message, state: FSMContext):
    user_data = await state.get_data()
    task = user_data['task']
    urgency = user_data['urgency']
    username = message.from_user.username or message.from_user.full_name

    file_info = "–§–∞–π–ª–∞ –Ω–µ—Ç."
    if message.document:
        file_info = f"üìé –ü—Ä–∏–∫—Ä–µ–ø–ª—ë–Ω —Ñ–∞–π–ª: {message.document.file_name}"

    text = (
        f"üÜï *–ù–æ–≤—ã–π –∑–∞–∫–∞–∑*\n\n"
        f"üë§ –û—Ç: @{username}\n"
        f"üìù –ó–∞–¥–∞—á–∞: {task}\n"
        f"‚è± –°—Ä–æ—á–Ω–æ—Å—Ç—å: {urgency}\n"
        f"{file_info}"
    )

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –∞–¥–º–∏–Ω—É –∏ –≤ –∫–∞–Ω–∞–ª
    await bot.send_message(ADMIN_ID, text, parse_mode="Markdown")
    await bot.send_message(CHANNEL_USERNAME, text, parse_mode="Markdown")
    if message.document:
        await bot.send_document(ADMIN_ID, message.document)
        await bot.send_document(CHANNEL_USERNAME, message.document)

    await message.answer("‚úÖ –°–ø–∞—Å–∏–±–æ! –í–∞—à –∑–∞–∫–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")
    await state.clear()

# -------------------- –û—Ç–∑—ã–≤ --------------------

@dp.callback_query(F.data == "feedback")
async def start_feedback(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.edit_text("üí¨ –ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –æ—Ç–∑—ã–≤:")
    await state.set_state(FeedbackState.waiting_for_feedback)

@dp.message(FeedbackState.waiting_for_feedback)
async def get_feedback(message: Message, state: FSMContext):
    username = message.from_user.username or message.from_user.full_name
    feedback = f"‚≠ê –û—Ç @{username}:\n{message.text}\n---\n"

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
    with open("reviews.txt", "a", encoding="utf-8") as f:
        f.write(feedback)

    await bot.send_message(ADMIN_ID, f"üìù –ù–æ–≤—ã–π –æ—Ç–∑—ã–≤ –æ—Ç @{username}:\n\n{message.text}")
    await message.answer("‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤!")
    await state.clear()

@dp.callback_query(F.data == "reviews")
async def show_reviews(callback: types.CallbackQuery):
    if not os.path.exists("reviews.txt"):
        await callback.message.edit_text("–ü–æ–∫–∞ —á—Ç–æ –Ω–µ—Ç –æ—Ç–∑—ã–≤–æ–≤ üòî", reply_markup=main_menu)
        return

    with open("reviews.txt", "r", encoding="utf-8") as f:
        lines = f.read().strip().split('---\n')
        last_reviews = lines[-5:] if len(lines) >= 5 else lines

    formatted = "\n\n".join(last_reviews).strip()
    if not formatted:
        formatted = "–ü–æ–∫–∞ —á—Ç–æ –Ω–µ—Ç –æ—Ç–∑—ã–≤–æ–≤ üòî"

    await callback.message.edit_text(f"‚≠ê *–û—Ç–∑—ã–≤—ã:*\n\n{formatted}", parse_mode="Markdown", reply_markup=main_menu)

# --------------------

async def main():
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())